%code requires // *.hh
{
	#include<string.h> 
	#include "hw3_output.hpp" 
	#include "hw5_common.hpp"
	#include "bp.hpp"
	
	using namespace std;
	using namespace hw5_stuff;
	
	#define YYSTYPE allTypes
}

%code // *.cc
{	
	extern int yylex();
	extern char *yytext;
		
	int yyerror(const char * message);
	
	extern int yylineno;
}

%token VOID

%token <number> INT 
%token <number> BYTE
%token <number> BOOL 

%token ENUM

%token RETURN 
%nonassoc IF
%nonassoc ELSE
%nonassoc WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%left  LBRACE
%left  RBRACE

%right ASSIGN
%left  OR
%left  AND
%left  RELOP_LEVEL_8_NEQ RELOP_LEVEL_8_EQ
%nonassoc RELOP_LEVEL_9_GE RELOP_LEVEL_9_LE RELOP_LEVEL_9_GT RELOP_LEVEL_9_LT
%left  BINOP_LEVEL_11_PLUSE BINOP_LEVEL_11_MINUS
%left  BINOP_LEVEL_12_MUL BINOP_LEVEL_12_DIV
%right NOT
%left  RPAREN
%left  LPAREN

%token <number> NUM
%token <string> STRING 
%token <string> ID
%token <string> B
%token <string> TRUE FALSE

%type <vartype> Type
%type <rettype> RetType
%type <var> FormalDecl
%type <string> EnumType  
%type <expr> Exp
%type <expr> LoopExp
%type <expr> Call
%type <string> JMarker
%type <number> BrMarker

%%

// Rule no. 00
S	:	Program  ;

// Rule no. 01
Program	:	StartProgramMarker Enums Funcs FinishProgramMarker { };

StartProgramMarker  : %empty	{ start_program();  };
FinishProgramMarker : %empty	{ finish_program(); };

// Rule no. 02, 03
Funcs	:	%empty { }
		|	FuncDecl Funcs { }
		;
				
// Rule no. 04
FuncDecl	:	StartFunctionScopeMarker RetType ID { new_function($3, $2, yylineno); } LPAREN Formals RPAREN { emit_current_function_header(); } LBRACE Statements RBRACE EndFunctionScopeMarker { };
StartFunctionScopeMarker : %empty { enter_function_scope(); };
EndFunctionScopeMarker : %empty   { exit_function_scope();  };

// Rule no. 05, 06
Enums	:	%empty 			{ }
		|	EnumDecl Enums 	{ }
		;

// Rule no. 07
EnumDecl			:	EnumTitle LBRACE EnumeratorList RBRACE SC EnumEeclEndMarker { }
EnumTitle   		:	ENUM ID 	{ enter_enum_decl_scope($2, yylineno); }
EnumEeclEndMarker	:	%empty 		{ exit_enum_decl_scope(); }

// Rule no. 08, 09	
RetType :	Type 	{ 
						if ($1 == type_int)			$$ = ret_type_int;
						else if ($1 == type_bool)	$$ = ret_type_bool;
						else 						$$ = ret_type_byte; 
					}
		| 	VOID 	{ 
													$$ = ret_type_void; 
					}
		;

// Rule no. 10, 11	
Formals :	%empty 		{ }
		|	FormalsList { }
		;
		
// Rule no. 12, 13	
FormalsList :	FormalDecl 					 { }
			|	FormalDecl COMMA FormalsList { }
			;	

// Rule no. 14, 15	
FormalDecl	:	Type ID 	{ 
								new_input($1, $2, yylineno);
								$$.type = $1;
								$$.name = $2;
							}
			|	EnumType ID { 
								new_input_enum($2, $1, yylineno);
								$$.type = type_enum;
								$$.name = $2;
								$$.enum_name = $1;
							}
			;	
		
// Rule no. 16, 17
EnumeratorList	:	Enumerator						{ }
				|	EnumeratorList COMMA Enumerator { }
				;

// Rule no. 18
Enumerator	:	ID { add_enum_value($1, yylineno); }
			;

// Rule no. 19, 20
Statements	:	Statement 				{ }
			|	Statements Statement 	{ }
			;			

// Rule no. 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35 
Statement	:	{ enter_scope(); } LBRACE Statements RBRACE { exit_scope(); }	{ 
																				}

			|	Type ID 	SC 													{ 
																					check_var_id_is_not_def($2, yylineno); 
																					new_variable($1, $2, yylineno, true); 	
																				}
			|	EnumType ID SC 													{ 	check_is_def_enum($1, yylineno); 
																					check_var_id_is_not_def($2, yylineno); new_enum_variable($1, $2, yylineno, true); 	
																				}
			|	EnumDecl 		   												{ 
																				}
																				
			|	Type 	 ID ASSIGN { check_var_id_is_not_def($2, yylineno);  new_variable($1, $2, yylineno, false); } Exp SC 	{
																																	assign_to_variable($2, yylineno, $5); 
																																}
			
			|	EnumType ID ASSIGN 	{ check_is_def_enum($1, yylineno); check_var_id_is_not_def($2, yylineno); new_enum_variable($1, $2, yylineno, false); } Exp SC 	{ 
																																										assign_to_enum_variable($1, $2, yylineno, $5); 
																																									}
			|	ID 			ASSIGN  { check_var_id_is_def($1, yylineno);  }	Exp SC 												{ 
																																	check_assignment ($1, $4, yylineno); 
																																	assign_to_variable($1, yylineno, $4); 
																																}
			|	Call 		SC 																									{ 
																																	eimit_call_backpatch($1);
																																}	
			|	RETURN 		SC																									{ 
																																	check_return_void(yylineno);     
																																}
			|	RETURN Exp 	SC																									{ 
																																	check_return($2, yylineno); 
																																}
			
			|	IF 		LPAREN LoopExp JMarker RPAREN EnSMarker Statement ExSMarker BrMarker		 														%prec IF	{ emit_if($3, $4, $9);  }
			|	IF 		LPAREN LoopExp JMarker RPAREN EnSMarker Statement ExSMarker BrMarker ELSE JMarker EnSMarker Statement BrMarker ExSMarker			%prec ELSE	{ emit_if_else($3, $4, $9, $11, $14);  }

			|	WHILE LPAREN BrMarker JMarker LoopExp JMarker RPAREN EnSMarker EnWMarker Statement ExWMarker ExSMarker BrMarker JMarker 								%prec WHILE { emit_while($3, $4, $5, $6, $13, $14);  }
			|	BREAK SC			{ check_break	(yylineno); emit_break_command();    }
			|	CONTINUE SC 		{ check_continue(yylineno); emit_continue_command(); }
			;
			
LoopExp : Exp  { check_exp_is(type_bool, $1, yylineno); $$ = $1; };
EnSMarker 		: %empty { enter_scope();	 };
ExSMarker 		: %empty { exit_scope();	 };
EnWMarker 		: %empty { enter_loop();	 };
ExWMarker 		: %empty { exit_loop();		 };
BrMarker		: %empty { $$ = emit_br_command();  };
JMarker  		: %empty { $$ = strdup(CodeBuffer::instance().genLabel().c_str()); };
	
// Rule no. 36, 37
Call	:	ID LPAREN { check_called_function_exists($1, yylineno); } ExpList RPAREN { $$ = check_called_function_close(yylineno); }
		|	ID LPAREN { check_called_function_exists($1, yylineno); } RPAREN 	     { $$ = check_called_function_close(yylineno); }
		;

// Rule no. 38, 39
ExpList	:	ExpListElement					{ }
		|	ExpListElement COMMA ExpList 	{ }
		;
		
ExpListElement	:	Exp	{ check_called_function_arg($1, yylineno); };

// Rule no. 40, 41, 42
Type	:	INT		{ $$ = type_int;  }
		|	BYTE    { $$ = type_byte; }
		|	BOOL    { $$ = type_bool; }
		;

// Rule no. 43
EnumType	:	ENUM ID	{ $$ = $2; } ;

// Rule no.	44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57
Exp	:	LPAREN Exp RPAREN     										{ 
																		check_not_void($2, yylineno);
																		$$ = $2;
																	}
	|	Exp BINOP_LEVEL_11_PLUSE Exp 	%prec BINOP_LEVEL_11_PLUSE	{ 
																		$$ = emit_plus_minus($1, $3, yylineno, true);
																	}
	|	Exp BINOP_LEVEL_11_MINUS Exp 	%prec BINOP_LEVEL_11_MINUS	{ 
																		$$ = emit_plus_minus($1, $3, yylineno, false);
																	}																	
	|	Exp BINOP_LEVEL_12_DIV Exp 		%prec BINOP_LEVEL_12_DIV	{  
																		$$ = emit_div($1, $3, yylineno);
																	}																	
	|	Exp BINOP_LEVEL_12_MUL Exp 		%prec BINOP_LEVEL_12_MUL	{  
																		$$ = emit_mult($1, $3, yylineno);
																	}
	|	ID                     										{ 
																		$$ = emit_exp_ID($1, yylineno);
																	}
	|	Call                   										{ 
																		//$$.type = get_type_from_call($1, yylineno); 	
																		//$$.init = true; 	
																		//$$.void_res_exp = ($1 == ret_type_void);
																		$$ = $1;
																	}
	|	NUM                    										{
																		$$ = emit_exp_INT32($1); 
																	}
	|	NUM B                  										{ 
																		$$ = emit_exp_BYTE($1, yylineno); 
																	}
	|	STRING                 										{ 
																		$$ = emit_exp_STRING($1); 
																	}																
	|	TRUE                   										{ 
																		$$ = emit_exp_TRUE(); 
																	}
	|	FALSE                  						 				{ 
																		$$ = emit_exp_FALSE(); 
																	}
	|	NOT Exp 							%prec NOT   			{ 
																		$$ = emit_exp_NOT($2, yylineno);																	
																	}
	|	Exp AND JMarker Exp 				%prec AND   			{ 
																		$$ = emit_exp_AND($1, $4, yylineno, $3);
																	}
	|	Exp OR JMarker Exp 					%prec OR    			{ 
																		$$ = emit_exp_OR($1, $4, yylineno, $3);
																	}
	|	Exp RELOP_LEVEL_8_EQ Exp 			%prec RELOP_LEVEL_8_EQ	{ 
																		$$ = emit_exp_EQ($1, $3, yylineno, true);
																	}
	|	Exp RELOP_LEVEL_8_NEQ Exp 			%prec RELOP_LEVEL_8_NEQ	{ 
																		$$ = emit_exp_EQ($1, $3, yylineno, false);
																	}
	|	Exp RELOP_LEVEL_9_GE Exp 			%prec RELOP_LEVEL_9_GE	{ 
																		$$ = emit_exp_RELOP($1, $3, yylineno, 0);																		
																	}
	|	Exp RELOP_LEVEL_9_LE Exp 			%prec RELOP_LEVEL_9_LE	{ 
																		$$ = emit_exp_RELOP($1, $3, yylineno, 1);
																	}
	|	Exp RELOP_LEVEL_9_GT Exp 			%prec RELOP_LEVEL_9_GT	{ 
																		$$ = emit_exp_RELOP($1, $3, yylineno, 2);
																	}
	|	Exp RELOP_LEVEL_9_LT Exp 			%prec RELOP_LEVEL_9_LT	{ 
																		$$ = emit_exp_RELOP($1, $3, yylineno, 3);
																	}
	|	LPAREN Type RPAREN Exp  									{ 
																		$$ = emit_var_convertion($2, $4, yylineno);
																	}
	;

%%

int main() {
	yyparse();
}

int yyerror(const char * message) {
	output::errorSyn(yylineno);
	exit(0);
}
