%{
	#include "hw3_output.hpp"
	#include "parserAdapter.hpp"

	using namespace std;
	using namespace output;

	extern int yylex();
	extern int yylineno;
	int yyerror(const char * message);


%}


%token BOOL VOID INT BYTE B
%token TRUE FALSE
%token WHILE RETURN
%token BREAK CONTINUE
%token SC COMMA
%token STRING ID NUM

%right ASSIGN

%nonassoc NO_ELSE
%nonassoc ELSE
%right IF
%left OR
%left AND
%left RELOPLEFT
%nonassoc RELOPNOTASS


%left ADDITIVE 
%left MUL

%right NOT


%left LPAREN RPAREN LBRACE RBRACE

%%

Program : INIT Funcs { 
	printProductionRule(1);
	checkMain();
	symbolTable.closeScope();
	endProgram();
	 
	}
		;
INIT : NEWSCOPECREATION {
	ruleInit();
}

Funcs :  %empty { printProductionRule(2); 
}
	  | FuncDecl Funcs { 
		  printProductionRule(3); 
		  }
	  ;

FuncDecl : RetType ID LPAREN Formals RPAREN {

			$$ = ruleFuncDeclStartFunc((IdNode*)$2, ((TypeNode*)$1)->type_name, ((FormalsList*)((Formals*)$4)->params)->functionParams );
			printProductionRule(4);

		} LBRACE Statements RBRACE {
			ruleFuncDeclEndFunc();
		}
		;

RetType : Type { 
		$$ = (TypeNode*)$1;
		printProductionRule(5); 
		}
		| VOID { 
			$$ = (TypeNode*)$1;	
			printProductionRule(6); 
			}
		;

Formals :  %empty { 
	$$ = new Formals();
	printProductionRule(7); 
	}
    | FormalsList { 
		$$ = new Formals((FormalsList*)$1);
		printProductionRule(8); 
		}
    ;

FormalsList : FormalDecl { 
	$$ = ruleAddFormals( (FormalsList*)ruleCreateFormals( ((VarNode*)$1)->lineno ), (VarNode*)$1); 
	printProductionRule(9); 
	}
			| FormalDecl COMMA FormalsList { 
				$$ = ruleAddFormals((FormalsList*)$3, (VarNode*)$1);
				printProductionRule(10); 
				}
			;

FormalDecl : Type ID { 
	$$ = ruleFormalDecl((TypeNode*)$1, (IdNode*)$2); 
	printProductionRule(11); 
	};
Statements : Statement {
				printProductionRule(12); 
				$$ = ruleStatements((StatementNode*)$1);
				}

		   | Statements JMA Statement {
			   printProductionRule(13);
			   	$$ = rulePatchStatements((StatementNode*)$1, (LabelNode*)$2, (StatementNode*)$3);
				
				}
		   ;

Statement : LBRACE NEWSCOPECREATION Statements RBRACE { 
			printProductionRule(14); 
			symbolTable.closeScope();
			}
		  | Type ID SC { 
			  	// DONE
			    printProductionRule(15); 
				$$ = ruleVarDecl(((TypeNode*)$1)->type_name, (IdNode*)$2);
				
				}

		  | Type ID ASSIGN Exp SC { 
			  	// DONE
				printProductionRule(16); 
				$$ = ruleVarDeclAssign( (IdNode*)$2, 
										((TypeNode*)$1)->type_name, 
										((ExpNode*)$4));
				
				}

		  | ID ASSIGN Exp SC { 
			  // DONE
			  printProductionRule(17); 
			  ruleIdAssign((IdNode*)$1 , (ExpNode*)$3);
			  
			  }
		  | Call SC { printProductionRule(18); 
		  }
		  | RETURN SC { 
			  printProductionRule(19);
			  ruleReturnVoid($1);
			  }
		  | RETURN Exp SC { 
			  printProductionRule(20);
			  ruleReturnNonVoid($1, (ExpNode*)$2);
			  }
		  | IF LPAREN Exp RPAREN JMA NEWSCOPECREATION Statement ENDSCOPE NJ %prec NO_ELSE { 	
			  printProductionRule(21); 
			  $$ = ruleIfNoElse( (ExpNode*)$3, (LabelNode*)$5, (StatementNode*)$7 );
			}

          | IF LPAREN Exp RPAREN JMA NEWSCOPECREATION Statement ENDSCOPE NJ ELSE JMA NEWSCOPECREATION Statement {
			   printProductionRule(22); 
			   $$ = ruleIfElse( (ExpNode*)$3, (LabelNode*)$5, (StatementNode*)$7, 
			   						  (StatementNode*)$9,  (LabelNode*)$11, (StatementNode*)$13); 
			   symbolTable.closeScope();
			  }

		  |   WHILE JMA LPAREN ENTERLOOP Exp RPAREN JMA Statement %prec NO_ELSE { 
			  	printProductionRule(23); 

				$$ = ruleWhileNoElse((StatementNode*)$8, (LabelNode*)$2, (LabelNode*)$7, (ExpNode*)$5 );
				symbolTable.closeScope();
			  }

		  |  WHILE JMA LPAREN ENTERLOOP Exp RPAREN JMA Statement NJ ELSE JMA NEWSCOPECREATION Statement { 
				printProductionRule(24);  
				$$ = ruleWhileElse((LabelNode*)$2, (ExpNode*)$5, (LabelNode*)$7, (StatementNode*)$8, (StatementNode*)$9, 
										(LabelNode*)$11, (StatementNode*)$13);
				symbolTable.closeScope();
			  }

		  | BREAK SC { 
			  printProductionRule(25); 
			  ruleBreakCheck($1);
			  }
		  | CONTINUE SC { 
			  printProductionRule(26); 
			  ruleContinueCheck($1);
			  }
		  ;

ENTERLOOP : %empty {
	enterWhile();
}


Call : ID LPAREN {
	 ruleAllowString((IdNode*)$1);} ExpList RPAREN { 
		printProductionRule(27); 
		cout << "call ID LPAREN ~~~~~~~~~~" << endl;
		$$ = ruleCallFunc((IdNode*)$1, (ExpList*)$4);
		}
	
	 | ID LPAREN RPAREN { 
		printProductionRule(28); 
		 cout << "call ID LPAREN RPAREN ~~~~~~~~~~" << endl;
		$$ = ruleCallEmptyFunc((IdNode*)$1 );
	 	}
	 ;

ExpList : Exp { 
		printProductionRule(29); 
		cout << "ExpList : Exp new list ~~~~~~~~~~" << endl;
		$$ = new ExpList();
		$$ = ruleAddExp( (ExpList*)$$, (ExpNode*)$1); 
		}
		| Exp COMMA ExpList { 
			printProductionRule(30); 
			cout << "ExpList : Exp add to list ~~~~~~~~~~" << endl;
			$$ = ruleAddExp((ExpList*)$3, (ExpNode*)$1);
			}
		;


Type	: INT { printProductionRule(31); 
}
		| BYTE { printProductionRule(32); 
		}
		| BOOL { printProductionRule(33); 
		}
		;

JMA : %empty {
		$$ = ruleBranchLabel();
	}
	;

NJ : %empty {
	$$ = ruleNextJump();
};

Exp : LPAREN Exp RPAREN { 
		printProductionRule(34); 
		cout << "LPAREN Exp RPAREN **********************" << endl;
		$$ = (ExpNode*)$2;
		}
	| Exp ADDITIVE Exp {
		printProductionRule(35); 
		cout << "Exp ADDITIVE Exp **********************" << endl; 
		$$ = ruleExpBinopExp((ExpNode*)$1, (BinopNode*)$2, (ExpNode*)$3);
		}
	| Exp MUL Exp {
		printProductionRule(35); 
		cout << "Exp MUL Exp **********************" << endl; 
		$$ = ruleExpBinopExp((ExpNode*)$1, (BinopNode*)$2, (ExpNode*)$3);
		}
	| ID { 
		printProductionRule(36); 
		$$ = ruleIDToExp((IdNode*)$1);
		}
	| Call {
		//TODO: final level
		printProductionRule(37); 
		$$ = ruleCallToExp((TypeNode*)$1);
		}
	| NUM { 
		printProductionRule(38); 
		$$ = ruleExpNum((NumNode*)$1);
		}
	| NUM B { 
		printProductionRule(39); 
		$$ = (ruleExpNumB((NumNode*)$1));
		}
	| STRING { 
		printProductionRule(40); 
		$$ = ruleHandleString((StringNode*)$1);
		}
	| TRUE { 
		printProductionRule(41); 
		$$ = ruleBool((ExpNode*)$1, "1");
		}
	| FALSE { 
		printProductionRule(42); 
		$$ = ruleBool((ExpNode*)$1, "0");
		}
	| NOT Exp {
		printProductionRule(43); 
		$$ = ruleNotExp((ExpNode*)$2);
		}
	| Exp AND JMA Exp {
		printProductionRule(44); 
		cout << "Exp AND Exp **********************" << endl; 
		$$ = ruleAndExp((ExpNode*)$1, (ExpNode*)$4, (LabelNode*)$3);
		}
	| Exp OR JMA Exp {
		printProductionRule(45); 
		cout << "Exp OR Exp **********************" << endl; 
		$$ = ruleOrExp((ExpNode*)$1, (ExpNode*)$4, (LabelNode*)$3);
		}
	| Exp RELOPLEFT Exp {
		printProductionRule(46); 
		cout << "Exp RELOPLEFT Exp **********************" << endl;
		// check both Exp are numerical
		$$ = ruleRelop((ExpNode*)$1, (RelopNode*)$2, (ExpNode*)$3);	
		}
    | Exp RELOPNOTASS Exp {
		printProductionRule(46); 
		cout << "Exp RELOPNOTASS Exp **********************" << endl; 
		$$ = ruleRelop((ExpNode*)$1, (RelopNode*)$2, (ExpNode*)$3);
		}
	;

NEWSCOPECREATION :  %empty { symbolTable.newScope(); };

ENDSCOPE : %empty { symbolTable.closeScope(); };

%%

int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn( yylineno );
	exit(0);
}